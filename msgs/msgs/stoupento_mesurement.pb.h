// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stoupento_mesurement.proto

#ifndef PROTOBUF_stoupento_5fmesurement_2eproto__INCLUDED
#define PROTOBUF_stoupento_5fmesurement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)

namespace stoupentoPlugin_msgs {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_stoupento_5fmesurement_2eproto();
void protobuf_AssignDesc_stoupento_5fmesurement_2eproto();
void protobuf_ShutdownFile_stoupento_5fmesurement_2eproto();

class StoupentoMesurement;

// ===================================================================

class StoupentoMesurement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stoupentoPlugin_msgs.msgs.StoupentoMesurement) */ {
 public:
  StoupentoMesurement();
  virtual ~StoupentoMesurement();

  StoupentoMesurement(const StoupentoMesurement& from);

  inline StoupentoMesurement& operator=(const StoupentoMesurement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoupentoMesurement& default_instance();

  void Swap(StoupentoMesurement* other);

  // implements Message ----------------------------------------------

  inline StoupentoMesurement* New() const { return New(NULL); }

  StoupentoMesurement* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoupentoMesurement& from);
  void MergeFrom(const StoupentoMesurement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoupentoMesurement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double left_wheel_vel = 1;
  bool has_left_wheel_vel() const;
  void clear_left_wheel_vel();
  static const int kLeftWheelVelFieldNumber = 1;
  double left_wheel_vel() const;
  void set_left_wheel_vel(double value);

  // required double left_wheel_ang = 2;
  bool has_left_wheel_ang() const;
  void clear_left_wheel_ang();
  static const int kLeftWheelAngFieldNumber = 2;
  double left_wheel_ang() const;
  void set_left_wheel_ang(double value);

  // required double right_wheel_vel = 3;
  bool has_right_wheel_vel() const;
  void clear_right_wheel_vel();
  static const int kRightWheelVelFieldNumber = 3;
  double right_wheel_vel() const;
  void set_right_wheel_vel(double value);

  // required double right_wheel_ang = 4;
  bool has_right_wheel_ang() const;
  void clear_right_wheel_ang();
  static const int kRightWheelAngFieldNumber = 4;
  double right_wheel_ang() const;
  void set_right_wheel_ang(double value);

  // required double left_joint_vel = 5;
  bool has_left_joint_vel() const;
  void clear_left_joint_vel();
  static const int kLeftJointVelFieldNumber = 5;
  double left_joint_vel() const;
  void set_left_joint_vel(double value);

  // required double left_joint_ang = 6;
  bool has_left_joint_ang() const;
  void clear_left_joint_ang();
  static const int kLeftJointAngFieldNumber = 6;
  double left_joint_ang() const;
  void set_left_joint_ang(double value);

  // required double right_joint_vel = 7;
  bool has_right_joint_vel() const;
  void clear_right_joint_vel();
  static const int kRightJointVelFieldNumber = 7;
  double right_joint_vel() const;
  void set_right_joint_vel(double value);

  // required double right_joint_ang = 8;
  bool has_right_joint_ang() const;
  void clear_right_joint_ang();
  static const int kRightJointAngFieldNumber = 8;
  double right_joint_ang() const;
  void set_right_joint_ang(double value);

  // required double left_wheel_torque = 9;
  bool has_left_wheel_torque() const;
  void clear_left_wheel_torque();
  static const int kLeftWheelTorqueFieldNumber = 9;
  double left_wheel_torque() const;
  void set_left_wheel_torque(double value);

  // required double right_wheel_torque = 10;
  bool has_right_wheel_torque() const;
  void clear_right_wheel_torque();
  static const int kRightWheelTorqueFieldNumber = 10;
  double right_wheel_torque() const;
  void set_right_wheel_torque(double value);

  // required .gazebo.msgs.Vector3d linear_acc = 11;
  bool has_linear_acc() const;
  void clear_linear_acc();
  static const int kLinearAccFieldNumber = 11;
  const ::gazebo::msgs::Vector3d& linear_acc() const;
  ::gazebo::msgs::Vector3d* mutable_linear_acc();
  ::gazebo::msgs::Vector3d* release_linear_acc();
  void set_allocated_linear_acc(::gazebo::msgs::Vector3d* linear_acc);

  // required .gazebo.msgs.Vector3d angular_vel = 12;
  bool has_angular_vel() const;
  void clear_angular_vel();
  static const int kAngularVelFieldNumber = 12;
  const ::gazebo::msgs::Vector3d& angular_vel() const;
  ::gazebo::msgs::Vector3d* mutable_angular_vel();
  ::gazebo::msgs::Vector3d* release_angular_vel();
  void set_allocated_angular_vel(::gazebo::msgs::Vector3d* angular_vel);

  // @@protoc_insertion_point(class_scope:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
 private:
  inline void set_has_left_wheel_vel();
  inline void clear_has_left_wheel_vel();
  inline void set_has_left_wheel_ang();
  inline void clear_has_left_wheel_ang();
  inline void set_has_right_wheel_vel();
  inline void clear_has_right_wheel_vel();
  inline void set_has_right_wheel_ang();
  inline void clear_has_right_wheel_ang();
  inline void set_has_left_joint_vel();
  inline void clear_has_left_joint_vel();
  inline void set_has_left_joint_ang();
  inline void clear_has_left_joint_ang();
  inline void set_has_right_joint_vel();
  inline void clear_has_right_joint_vel();
  inline void set_has_right_joint_ang();
  inline void clear_has_right_joint_ang();
  inline void set_has_left_wheel_torque();
  inline void clear_has_left_wheel_torque();
  inline void set_has_right_wheel_torque();
  inline void clear_has_right_wheel_torque();
  inline void set_has_linear_acc();
  inline void clear_has_linear_acc();
  inline void set_has_angular_vel();
  inline void clear_has_angular_vel();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double left_wheel_vel_;
  double left_wheel_ang_;
  double right_wheel_vel_;
  double right_wheel_ang_;
  double left_joint_vel_;
  double left_joint_ang_;
  double right_joint_vel_;
  double right_joint_ang_;
  double left_wheel_torque_;
  double right_wheel_torque_;
  ::gazebo::msgs::Vector3d* linear_acc_;
  ::gazebo::msgs::Vector3d* angular_vel_;
  friend void  protobuf_AddDesc_stoupento_5fmesurement_2eproto();
  friend void protobuf_AssignDesc_stoupento_5fmesurement_2eproto();
  friend void protobuf_ShutdownFile_stoupento_5fmesurement_2eproto();

  void InitAsDefaultInstance();
  static StoupentoMesurement* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StoupentoMesurement

// required double left_wheel_vel = 1;
inline bool StoupentoMesurement::has_left_wheel_vel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoupentoMesurement::set_has_left_wheel_vel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoupentoMesurement::clear_has_left_wheel_vel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoupentoMesurement::clear_left_wheel_vel() {
  left_wheel_vel_ = 0;
  clear_has_left_wheel_vel();
}
inline double StoupentoMesurement::left_wheel_vel() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_wheel_vel)
  return left_wheel_vel_;
}
inline void StoupentoMesurement::set_left_wheel_vel(double value) {
  set_has_left_wheel_vel();
  left_wheel_vel_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_wheel_vel)
}

// required double left_wheel_ang = 2;
inline bool StoupentoMesurement::has_left_wheel_ang() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoupentoMesurement::set_has_left_wheel_ang() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoupentoMesurement::clear_has_left_wheel_ang() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoupentoMesurement::clear_left_wheel_ang() {
  left_wheel_ang_ = 0;
  clear_has_left_wheel_ang();
}
inline double StoupentoMesurement::left_wheel_ang() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_wheel_ang)
  return left_wheel_ang_;
}
inline void StoupentoMesurement::set_left_wheel_ang(double value) {
  set_has_left_wheel_ang();
  left_wheel_ang_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_wheel_ang)
}

// required double right_wheel_vel = 3;
inline bool StoupentoMesurement::has_right_wheel_vel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoupentoMesurement::set_has_right_wheel_vel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoupentoMesurement::clear_has_right_wheel_vel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoupentoMesurement::clear_right_wheel_vel() {
  right_wheel_vel_ = 0;
  clear_has_right_wheel_vel();
}
inline double StoupentoMesurement::right_wheel_vel() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_wheel_vel)
  return right_wheel_vel_;
}
inline void StoupentoMesurement::set_right_wheel_vel(double value) {
  set_has_right_wheel_vel();
  right_wheel_vel_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_wheel_vel)
}

// required double right_wheel_ang = 4;
inline bool StoupentoMesurement::has_right_wheel_ang() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoupentoMesurement::set_has_right_wheel_ang() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoupentoMesurement::clear_has_right_wheel_ang() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoupentoMesurement::clear_right_wheel_ang() {
  right_wheel_ang_ = 0;
  clear_has_right_wheel_ang();
}
inline double StoupentoMesurement::right_wheel_ang() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_wheel_ang)
  return right_wheel_ang_;
}
inline void StoupentoMesurement::set_right_wheel_ang(double value) {
  set_has_right_wheel_ang();
  right_wheel_ang_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_wheel_ang)
}

// required double left_joint_vel = 5;
inline bool StoupentoMesurement::has_left_joint_vel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StoupentoMesurement::set_has_left_joint_vel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StoupentoMesurement::clear_has_left_joint_vel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StoupentoMesurement::clear_left_joint_vel() {
  left_joint_vel_ = 0;
  clear_has_left_joint_vel();
}
inline double StoupentoMesurement::left_joint_vel() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_joint_vel)
  return left_joint_vel_;
}
inline void StoupentoMesurement::set_left_joint_vel(double value) {
  set_has_left_joint_vel();
  left_joint_vel_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_joint_vel)
}

// required double left_joint_ang = 6;
inline bool StoupentoMesurement::has_left_joint_ang() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StoupentoMesurement::set_has_left_joint_ang() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StoupentoMesurement::clear_has_left_joint_ang() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StoupentoMesurement::clear_left_joint_ang() {
  left_joint_ang_ = 0;
  clear_has_left_joint_ang();
}
inline double StoupentoMesurement::left_joint_ang() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_joint_ang)
  return left_joint_ang_;
}
inline void StoupentoMesurement::set_left_joint_ang(double value) {
  set_has_left_joint_ang();
  left_joint_ang_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_joint_ang)
}

// required double right_joint_vel = 7;
inline bool StoupentoMesurement::has_right_joint_vel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StoupentoMesurement::set_has_right_joint_vel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StoupentoMesurement::clear_has_right_joint_vel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StoupentoMesurement::clear_right_joint_vel() {
  right_joint_vel_ = 0;
  clear_has_right_joint_vel();
}
inline double StoupentoMesurement::right_joint_vel() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_joint_vel)
  return right_joint_vel_;
}
inline void StoupentoMesurement::set_right_joint_vel(double value) {
  set_has_right_joint_vel();
  right_joint_vel_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_joint_vel)
}

// required double right_joint_ang = 8;
inline bool StoupentoMesurement::has_right_joint_ang() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StoupentoMesurement::set_has_right_joint_ang() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StoupentoMesurement::clear_has_right_joint_ang() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StoupentoMesurement::clear_right_joint_ang() {
  right_joint_ang_ = 0;
  clear_has_right_joint_ang();
}
inline double StoupentoMesurement::right_joint_ang() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_joint_ang)
  return right_joint_ang_;
}
inline void StoupentoMesurement::set_right_joint_ang(double value) {
  set_has_right_joint_ang();
  right_joint_ang_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_joint_ang)
}

// required double left_wheel_torque = 9;
inline bool StoupentoMesurement::has_left_wheel_torque() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StoupentoMesurement::set_has_left_wheel_torque() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StoupentoMesurement::clear_has_left_wheel_torque() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StoupentoMesurement::clear_left_wheel_torque() {
  left_wheel_torque_ = 0;
  clear_has_left_wheel_torque();
}
inline double StoupentoMesurement::left_wheel_torque() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_wheel_torque)
  return left_wheel_torque_;
}
inline void StoupentoMesurement::set_left_wheel_torque(double value) {
  set_has_left_wheel_torque();
  left_wheel_torque_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_wheel_torque)
}

// required double right_wheel_torque = 10;
inline bool StoupentoMesurement::has_right_wheel_torque() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StoupentoMesurement::set_has_right_wheel_torque() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StoupentoMesurement::clear_has_right_wheel_torque() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StoupentoMesurement::clear_right_wheel_torque() {
  right_wheel_torque_ = 0;
  clear_has_right_wheel_torque();
}
inline double StoupentoMesurement::right_wheel_torque() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_wheel_torque)
  return right_wheel_torque_;
}
inline void StoupentoMesurement::set_right_wheel_torque(double value) {
  set_has_right_wheel_torque();
  right_wheel_torque_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_wheel_torque)
}

// required .gazebo.msgs.Vector3d linear_acc = 11;
inline bool StoupentoMesurement::has_linear_acc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StoupentoMesurement::set_has_linear_acc() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StoupentoMesurement::clear_has_linear_acc() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StoupentoMesurement::clear_linear_acc() {
  if (linear_acc_ != NULL) linear_acc_->::gazebo::msgs::Vector3d::Clear();
  clear_has_linear_acc();
}
inline const ::gazebo::msgs::Vector3d& StoupentoMesurement::linear_acc() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.linear_acc)
  return linear_acc_ != NULL ? *linear_acc_ : *default_instance_->linear_acc_;
}
inline ::gazebo::msgs::Vector3d* StoupentoMesurement::mutable_linear_acc() {
  set_has_linear_acc();
  if (linear_acc_ == NULL) {
    linear_acc_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:stoupentoPlugin_msgs.msgs.StoupentoMesurement.linear_acc)
  return linear_acc_;
}
inline ::gazebo::msgs::Vector3d* StoupentoMesurement::release_linear_acc() {
  // @@protoc_insertion_point(field_release:stoupentoPlugin_msgs.msgs.StoupentoMesurement.linear_acc)
  clear_has_linear_acc();
  ::gazebo::msgs::Vector3d* temp = linear_acc_;
  linear_acc_ = NULL;
  return temp;
}
inline void StoupentoMesurement::set_allocated_linear_acc(::gazebo::msgs::Vector3d* linear_acc) {
  delete linear_acc_;
  linear_acc_ = linear_acc;
  if (linear_acc) {
    set_has_linear_acc();
  } else {
    clear_has_linear_acc();
  }
  // @@protoc_insertion_point(field_set_allocated:stoupentoPlugin_msgs.msgs.StoupentoMesurement.linear_acc)
}

// required .gazebo.msgs.Vector3d angular_vel = 12;
inline bool StoupentoMesurement::has_angular_vel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StoupentoMesurement::set_has_angular_vel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StoupentoMesurement::clear_has_angular_vel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StoupentoMesurement::clear_angular_vel() {
  if (angular_vel_ != NULL) angular_vel_->::gazebo::msgs::Vector3d::Clear();
  clear_has_angular_vel();
}
inline const ::gazebo::msgs::Vector3d& StoupentoMesurement::angular_vel() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.angular_vel)
  return angular_vel_ != NULL ? *angular_vel_ : *default_instance_->angular_vel_;
}
inline ::gazebo::msgs::Vector3d* StoupentoMesurement::mutable_angular_vel() {
  set_has_angular_vel();
  if (angular_vel_ == NULL) {
    angular_vel_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:stoupentoPlugin_msgs.msgs.StoupentoMesurement.angular_vel)
  return angular_vel_;
}
inline ::gazebo::msgs::Vector3d* StoupentoMesurement::release_angular_vel() {
  // @@protoc_insertion_point(field_release:stoupentoPlugin_msgs.msgs.StoupentoMesurement.angular_vel)
  clear_has_angular_vel();
  ::gazebo::msgs::Vector3d* temp = angular_vel_;
  angular_vel_ = NULL;
  return temp;
}
inline void StoupentoMesurement::set_allocated_angular_vel(::gazebo::msgs::Vector3d* angular_vel) {
  delete angular_vel_;
  angular_vel_ = angular_vel;
  if (angular_vel) {
    set_has_angular_vel();
  } else {
    clear_has_angular_vel();
  }
  // @@protoc_insertion_point(field_set_allocated:stoupentoPlugin_msgs.msgs.StoupentoMesurement.angular_vel)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace stoupentoPlugin_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stoupento_5fmesurement_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stoupento_mesurement.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stoupento_mesurement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace stoupentoPlugin_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* StoupentoMesurement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoupentoMesurement_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_stoupento_5fmesurement_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_stoupento_5fmesurement_2eproto() {
  protobuf_AddDesc_stoupento_5fmesurement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stoupento_mesurement.proto");
  GOOGLE_CHECK(file != NULL);
  StoupentoMesurement_descriptor_ = file->message_type(0);
  static const int StoupentoMesurement_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoupentoMesurement, left_wheel_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoupentoMesurement, left_wheel_ang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoupentoMesurement, right_wheel_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoupentoMesurement, right_wheel_ang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoupentoMesurement, left_joint_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoupentoMesurement, left_joint_ang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoupentoMesurement, right_joint_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoupentoMesurement, right_joint_ang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoupentoMesurement, left_wheel_torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoupentoMesurement, right_wheel_torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoupentoMesurement, linear_acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoupentoMesurement, angular_vel_),
  };
  StoupentoMesurement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoupentoMesurement_descriptor_,
      StoupentoMesurement::default_instance_,
      StoupentoMesurement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoupentoMesurement, _has_bits_[0]),
      -1,
      -1,
      sizeof(StoupentoMesurement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoupentoMesurement, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stoupento_5fmesurement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoupentoMesurement_descriptor_, &StoupentoMesurement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stoupento_5fmesurement_2eproto() {
  delete StoupentoMesurement::default_instance_;
  delete StoupentoMesurement_reflection_;
}

void protobuf_AddDesc_stoupento_5fmesurement_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_stoupento_5fmesurement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032stoupento_mesurement.proto\022\031stoupentoP"
    "lugin_msgs.msgs\032\016vector3d.proto\"\347\002\n\023Stou"
    "pentoMesurement\022\026\n\016left_wheel_vel\030\001 \002(\001\022"
    "\026\n\016left_wheel_ang\030\002 \002(\001\022\027\n\017right_wheel_v"
    "el\030\003 \002(\001\022\027\n\017right_wheel_ang\030\004 \002(\001\022\026\n\016lef"
    "t_joint_vel\030\005 \002(\001\022\026\n\016left_joint_ang\030\006 \002("
    "\001\022\027\n\017right_joint_vel\030\007 \002(\001\022\027\n\017right_join"
    "t_ang\030\010 \002(\001\022\031\n\021left_wheel_torque\030\t \002(\001\022\032"
    "\n\022right_wheel_torque\030\n \002(\001\022)\n\nlinear_acc"
    "\030\013 \002(\0132\025.gazebo.msgs.Vector3d\022*\n\013angular"
    "_vel\030\014 \002(\0132\025.gazebo.msgs.Vector3d", 433);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stoupento_mesurement.proto", &protobuf_RegisterTypes);
  StoupentoMesurement::default_instance_ = new StoupentoMesurement();
  StoupentoMesurement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stoupento_5fmesurement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stoupento_5fmesurement_2eproto {
  StaticDescriptorInitializer_stoupento_5fmesurement_2eproto() {
    protobuf_AddDesc_stoupento_5fmesurement_2eproto();
  }
} static_descriptor_initializer_stoupento_5fmesurement_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoupentoMesurement::kLeftWheelVelFieldNumber;
const int StoupentoMesurement::kLeftWheelAngFieldNumber;
const int StoupentoMesurement::kRightWheelVelFieldNumber;
const int StoupentoMesurement::kRightWheelAngFieldNumber;
const int StoupentoMesurement::kLeftJointVelFieldNumber;
const int StoupentoMesurement::kLeftJointAngFieldNumber;
const int StoupentoMesurement::kRightJointVelFieldNumber;
const int StoupentoMesurement::kRightJointAngFieldNumber;
const int StoupentoMesurement::kLeftWheelTorqueFieldNumber;
const int StoupentoMesurement::kRightWheelTorqueFieldNumber;
const int StoupentoMesurement::kLinearAccFieldNumber;
const int StoupentoMesurement::kAngularVelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoupentoMesurement::StoupentoMesurement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
}

void StoupentoMesurement::InitAsDefaultInstance() {
  linear_acc_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  angular_vel_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
}

StoupentoMesurement::StoupentoMesurement(const StoupentoMesurement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
}

void StoupentoMesurement::SharedCtor() {
  _cached_size_ = 0;
  left_wheel_vel_ = 0;
  left_wheel_ang_ = 0;
  right_wheel_vel_ = 0;
  right_wheel_ang_ = 0;
  left_joint_vel_ = 0;
  left_joint_ang_ = 0;
  right_joint_vel_ = 0;
  right_joint_ang_ = 0;
  left_wheel_torque_ = 0;
  right_wheel_torque_ = 0;
  linear_acc_ = NULL;
  angular_vel_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoupentoMesurement::~StoupentoMesurement() {
  // @@protoc_insertion_point(destructor:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
  SharedDtor();
}

void StoupentoMesurement::SharedDtor() {
  if (this != default_instance_) {
    delete linear_acc_;
    delete angular_vel_;
  }
}

void StoupentoMesurement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoupentoMesurement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoupentoMesurement_descriptor_;
}

const StoupentoMesurement& StoupentoMesurement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stoupento_5fmesurement_2eproto();
  return *default_instance_;
}

StoupentoMesurement* StoupentoMesurement::default_instance_ = NULL;

StoupentoMesurement* StoupentoMesurement::New(::google::protobuf::Arena* arena) const {
  StoupentoMesurement* n = new StoupentoMesurement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoupentoMesurement::Clear() {
// @@protoc_insertion_point(message_clear_start:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StoupentoMesurement, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StoupentoMesurement*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(left_wheel_vel_, right_joint_ang_);
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ZR_(left_wheel_torque_, right_wheel_torque_);
    if (has_linear_acc()) {
      if (linear_acc_ != NULL) linear_acc_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_angular_vel()) {
      if (angular_vel_ != NULL) angular_vel_->::gazebo::msgs::Vector3d::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StoupentoMesurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double left_wheel_vel = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_wheel_vel_)));
          set_has_left_wheel_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_left_wheel_ang;
        break;
      }

      // required double left_wheel_ang = 2;
      case 2: {
        if (tag == 17) {
         parse_left_wheel_ang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_wheel_ang_)));
          set_has_left_wheel_ang();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_right_wheel_vel;
        break;
      }

      // required double right_wheel_vel = 3;
      case 3: {
        if (tag == 25) {
         parse_right_wheel_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_wheel_vel_)));
          set_has_right_wheel_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_right_wheel_ang;
        break;
      }

      // required double right_wheel_ang = 4;
      case 4: {
        if (tag == 33) {
         parse_right_wheel_ang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_wheel_ang_)));
          set_has_right_wheel_ang();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_left_joint_vel;
        break;
      }

      // required double left_joint_vel = 5;
      case 5: {
        if (tag == 41) {
         parse_left_joint_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_joint_vel_)));
          set_has_left_joint_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_left_joint_ang;
        break;
      }

      // required double left_joint_ang = 6;
      case 6: {
        if (tag == 49) {
         parse_left_joint_ang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_joint_ang_)));
          set_has_left_joint_ang();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_right_joint_vel;
        break;
      }

      // required double right_joint_vel = 7;
      case 7: {
        if (tag == 57) {
         parse_right_joint_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_joint_vel_)));
          set_has_right_joint_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_right_joint_ang;
        break;
      }

      // required double right_joint_ang = 8;
      case 8: {
        if (tag == 65) {
         parse_right_joint_ang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_joint_ang_)));
          set_has_right_joint_ang();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_left_wheel_torque;
        break;
      }

      // required double left_wheel_torque = 9;
      case 9: {
        if (tag == 73) {
         parse_left_wheel_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_wheel_torque_)));
          set_has_left_wheel_torque();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_right_wheel_torque;
        break;
      }

      // required double right_wheel_torque = 10;
      case 10: {
        if (tag == 81) {
         parse_right_wheel_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_wheel_torque_)));
          set_has_right_wheel_torque();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_linear_acc;
        break;
      }

      // required .gazebo.msgs.Vector3d linear_acc = 11;
      case 11: {
        if (tag == 90) {
         parse_linear_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_angular_vel;
        break;
      }

      // required .gazebo.msgs.Vector3d angular_vel = 12;
      case 12: {
        if (tag == 98) {
         parse_angular_vel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_vel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
  return false;
#undef DO_
}

void StoupentoMesurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
  // required double left_wheel_vel = 1;
  if (has_left_wheel_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->left_wheel_vel(), output);
  }

  // required double left_wheel_ang = 2;
  if (has_left_wheel_ang()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->left_wheel_ang(), output);
  }

  // required double right_wheel_vel = 3;
  if (has_right_wheel_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->right_wheel_vel(), output);
  }

  // required double right_wheel_ang = 4;
  if (has_right_wheel_ang()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->right_wheel_ang(), output);
  }

  // required double left_joint_vel = 5;
  if (has_left_joint_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->left_joint_vel(), output);
  }

  // required double left_joint_ang = 6;
  if (has_left_joint_ang()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->left_joint_ang(), output);
  }

  // required double right_joint_vel = 7;
  if (has_right_joint_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->right_joint_vel(), output);
  }

  // required double right_joint_ang = 8;
  if (has_right_joint_ang()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->right_joint_ang(), output);
  }

  // required double left_wheel_torque = 9;
  if (has_left_wheel_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->left_wheel_torque(), output);
  }

  // required double right_wheel_torque = 10;
  if (has_right_wheel_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->right_wheel_torque(), output);
  }

  // required .gazebo.msgs.Vector3d linear_acc = 11;
  if (has_linear_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->linear_acc_, output);
  }

  // required .gazebo.msgs.Vector3d angular_vel = 12;
  if (has_angular_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->angular_vel_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
}

::google::protobuf::uint8* StoupentoMesurement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
  // required double left_wheel_vel = 1;
  if (has_left_wheel_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->left_wheel_vel(), target);
  }

  // required double left_wheel_ang = 2;
  if (has_left_wheel_ang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->left_wheel_ang(), target);
  }

  // required double right_wheel_vel = 3;
  if (has_right_wheel_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->right_wheel_vel(), target);
  }

  // required double right_wheel_ang = 4;
  if (has_right_wheel_ang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->right_wheel_ang(), target);
  }

  // required double left_joint_vel = 5;
  if (has_left_joint_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->left_joint_vel(), target);
  }

  // required double left_joint_ang = 6;
  if (has_left_joint_ang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->left_joint_ang(), target);
  }

  // required double right_joint_vel = 7;
  if (has_right_joint_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->right_joint_vel(), target);
  }

  // required double right_joint_ang = 8;
  if (has_right_joint_ang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->right_joint_ang(), target);
  }

  // required double left_wheel_torque = 9;
  if (has_left_wheel_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->left_wheel_torque(), target);
  }

  // required double right_wheel_torque = 10;
  if (has_right_wheel_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->right_wheel_torque(), target);
  }

  // required .gazebo.msgs.Vector3d linear_acc = 11;
  if (has_linear_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->linear_acc_, false, target);
  }

  // required .gazebo.msgs.Vector3d angular_vel = 12;
  if (has_angular_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->angular_vel_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
  return target;
}

int StoupentoMesurement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
  int total_size = 0;

  if (has_left_wheel_vel()) {
    // required double left_wheel_vel = 1;
    total_size += 1 + 8;
  }

  if (has_left_wheel_ang()) {
    // required double left_wheel_ang = 2;
    total_size += 1 + 8;
  }

  if (has_right_wheel_vel()) {
    // required double right_wheel_vel = 3;
    total_size += 1 + 8;
  }

  if (has_right_wheel_ang()) {
    // required double right_wheel_ang = 4;
    total_size += 1 + 8;
  }

  if (has_left_joint_vel()) {
    // required double left_joint_vel = 5;
    total_size += 1 + 8;
  }

  if (has_left_joint_ang()) {
    // required double left_joint_ang = 6;
    total_size += 1 + 8;
  }

  if (has_right_joint_vel()) {
    // required double right_joint_vel = 7;
    total_size += 1 + 8;
  }

  if (has_right_joint_ang()) {
    // required double right_joint_ang = 8;
    total_size += 1 + 8;
  }

  if (has_left_wheel_torque()) {
    // required double left_wheel_torque = 9;
    total_size += 1 + 8;
  }

  if (has_right_wheel_torque()) {
    // required double right_wheel_torque = 10;
    total_size += 1 + 8;
  }

  if (has_linear_acc()) {
    // required .gazebo.msgs.Vector3d linear_acc = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acc_);
  }

  if (has_angular_vel()) {
    // required .gazebo.msgs.Vector3d angular_vel = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_vel_);
  }

  return total_size;
}
int StoupentoMesurement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required double left_wheel_vel = 1;
    total_size += 1 + 8;

    // required double left_wheel_ang = 2;
    total_size += 1 + 8;

    // required double right_wheel_vel = 3;
    total_size += 1 + 8;

    // required double right_wheel_ang = 4;
    total_size += 1 + 8;

    // required double left_joint_vel = 5;
    total_size += 1 + 8;

    // required double left_joint_ang = 6;
    total_size += 1 + 8;

    // required double right_joint_vel = 7;
    total_size += 1 + 8;

    // required double right_joint_ang = 8;
    total_size += 1 + 8;

    // required double left_wheel_torque = 9;
    total_size += 1 + 8;

    // required double right_wheel_torque = 10;
    total_size += 1 + 8;

    // required .gazebo.msgs.Vector3d linear_acc = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acc_);

    // required .gazebo.msgs.Vector3d angular_vel = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_vel_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoupentoMesurement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StoupentoMesurement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StoupentoMesurement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
    MergeFrom(*source);
  }
}

void StoupentoMesurement::MergeFrom(const StoupentoMesurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_wheel_vel()) {
      set_left_wheel_vel(from.left_wheel_vel());
    }
    if (from.has_left_wheel_ang()) {
      set_left_wheel_ang(from.left_wheel_ang());
    }
    if (from.has_right_wheel_vel()) {
      set_right_wheel_vel(from.right_wheel_vel());
    }
    if (from.has_right_wheel_ang()) {
      set_right_wheel_ang(from.right_wheel_ang());
    }
    if (from.has_left_joint_vel()) {
      set_left_joint_vel(from.left_joint_vel());
    }
    if (from.has_left_joint_ang()) {
      set_left_joint_ang(from.left_joint_ang());
    }
    if (from.has_right_joint_vel()) {
      set_right_joint_vel(from.right_joint_vel());
    }
    if (from.has_right_joint_ang()) {
      set_right_joint_ang(from.right_joint_ang());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_left_wheel_torque()) {
      set_left_wheel_torque(from.left_wheel_torque());
    }
    if (from.has_right_wheel_torque()) {
      set_right_wheel_torque(from.right_wheel_torque());
    }
    if (from.has_linear_acc()) {
      mutable_linear_acc()->::gazebo::msgs::Vector3d::MergeFrom(from.linear_acc());
    }
    if (from.has_angular_vel()) {
      mutable_angular_vel()->::gazebo::msgs::Vector3d::MergeFrom(from.angular_vel());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StoupentoMesurement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoupentoMesurement::CopyFrom(const StoupentoMesurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stoupentoPlugin_msgs.msgs.StoupentoMesurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoupentoMesurement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  if (has_linear_acc()) {
    if (!this->linear_acc_->IsInitialized()) return false;
  }
  if (has_angular_vel()) {
    if (!this->angular_vel_->IsInitialized()) return false;
  }
  return true;
}

void StoupentoMesurement::Swap(StoupentoMesurement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoupentoMesurement::InternalSwap(StoupentoMesurement* other) {
  std::swap(left_wheel_vel_, other->left_wheel_vel_);
  std::swap(left_wheel_ang_, other->left_wheel_ang_);
  std::swap(right_wheel_vel_, other->right_wheel_vel_);
  std::swap(right_wheel_ang_, other->right_wheel_ang_);
  std::swap(left_joint_vel_, other->left_joint_vel_);
  std::swap(left_joint_ang_, other->left_joint_ang_);
  std::swap(right_joint_vel_, other->right_joint_vel_);
  std::swap(right_joint_ang_, other->right_joint_ang_);
  std::swap(left_wheel_torque_, other->left_wheel_torque_);
  std::swap(right_wheel_torque_, other->right_wheel_torque_);
  std::swap(linear_acc_, other->linear_acc_);
  std::swap(angular_vel_, other->angular_vel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoupentoMesurement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoupentoMesurement_descriptor_;
  metadata.reflection = StoupentoMesurement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoupentoMesurement

// required double left_wheel_vel = 1;
bool StoupentoMesurement::has_left_wheel_vel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoupentoMesurement::set_has_left_wheel_vel() {
  _has_bits_[0] |= 0x00000001u;
}
void StoupentoMesurement::clear_has_left_wheel_vel() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoupentoMesurement::clear_left_wheel_vel() {
  left_wheel_vel_ = 0;
  clear_has_left_wheel_vel();
}
 double StoupentoMesurement::left_wheel_vel() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_wheel_vel)
  return left_wheel_vel_;
}
 void StoupentoMesurement::set_left_wheel_vel(double value) {
  set_has_left_wheel_vel();
  left_wheel_vel_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_wheel_vel)
}

// required double left_wheel_ang = 2;
bool StoupentoMesurement::has_left_wheel_ang() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StoupentoMesurement::set_has_left_wheel_ang() {
  _has_bits_[0] |= 0x00000002u;
}
void StoupentoMesurement::clear_has_left_wheel_ang() {
  _has_bits_[0] &= ~0x00000002u;
}
void StoupentoMesurement::clear_left_wheel_ang() {
  left_wheel_ang_ = 0;
  clear_has_left_wheel_ang();
}
 double StoupentoMesurement::left_wheel_ang() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_wheel_ang)
  return left_wheel_ang_;
}
 void StoupentoMesurement::set_left_wheel_ang(double value) {
  set_has_left_wheel_ang();
  left_wheel_ang_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_wheel_ang)
}

// required double right_wheel_vel = 3;
bool StoupentoMesurement::has_right_wheel_vel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StoupentoMesurement::set_has_right_wheel_vel() {
  _has_bits_[0] |= 0x00000004u;
}
void StoupentoMesurement::clear_has_right_wheel_vel() {
  _has_bits_[0] &= ~0x00000004u;
}
void StoupentoMesurement::clear_right_wheel_vel() {
  right_wheel_vel_ = 0;
  clear_has_right_wheel_vel();
}
 double StoupentoMesurement::right_wheel_vel() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_wheel_vel)
  return right_wheel_vel_;
}
 void StoupentoMesurement::set_right_wheel_vel(double value) {
  set_has_right_wheel_vel();
  right_wheel_vel_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_wheel_vel)
}

// required double right_wheel_ang = 4;
bool StoupentoMesurement::has_right_wheel_ang() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StoupentoMesurement::set_has_right_wheel_ang() {
  _has_bits_[0] |= 0x00000008u;
}
void StoupentoMesurement::clear_has_right_wheel_ang() {
  _has_bits_[0] &= ~0x00000008u;
}
void StoupentoMesurement::clear_right_wheel_ang() {
  right_wheel_ang_ = 0;
  clear_has_right_wheel_ang();
}
 double StoupentoMesurement::right_wheel_ang() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_wheel_ang)
  return right_wheel_ang_;
}
 void StoupentoMesurement::set_right_wheel_ang(double value) {
  set_has_right_wheel_ang();
  right_wheel_ang_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_wheel_ang)
}

// required double left_joint_vel = 5;
bool StoupentoMesurement::has_left_joint_vel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StoupentoMesurement::set_has_left_joint_vel() {
  _has_bits_[0] |= 0x00000010u;
}
void StoupentoMesurement::clear_has_left_joint_vel() {
  _has_bits_[0] &= ~0x00000010u;
}
void StoupentoMesurement::clear_left_joint_vel() {
  left_joint_vel_ = 0;
  clear_has_left_joint_vel();
}
 double StoupentoMesurement::left_joint_vel() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_joint_vel)
  return left_joint_vel_;
}
 void StoupentoMesurement::set_left_joint_vel(double value) {
  set_has_left_joint_vel();
  left_joint_vel_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_joint_vel)
}

// required double left_joint_ang = 6;
bool StoupentoMesurement::has_left_joint_ang() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StoupentoMesurement::set_has_left_joint_ang() {
  _has_bits_[0] |= 0x00000020u;
}
void StoupentoMesurement::clear_has_left_joint_ang() {
  _has_bits_[0] &= ~0x00000020u;
}
void StoupentoMesurement::clear_left_joint_ang() {
  left_joint_ang_ = 0;
  clear_has_left_joint_ang();
}
 double StoupentoMesurement::left_joint_ang() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_joint_ang)
  return left_joint_ang_;
}
 void StoupentoMesurement::set_left_joint_ang(double value) {
  set_has_left_joint_ang();
  left_joint_ang_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_joint_ang)
}

// required double right_joint_vel = 7;
bool StoupentoMesurement::has_right_joint_vel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StoupentoMesurement::set_has_right_joint_vel() {
  _has_bits_[0] |= 0x00000040u;
}
void StoupentoMesurement::clear_has_right_joint_vel() {
  _has_bits_[0] &= ~0x00000040u;
}
void StoupentoMesurement::clear_right_joint_vel() {
  right_joint_vel_ = 0;
  clear_has_right_joint_vel();
}
 double StoupentoMesurement::right_joint_vel() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_joint_vel)
  return right_joint_vel_;
}
 void StoupentoMesurement::set_right_joint_vel(double value) {
  set_has_right_joint_vel();
  right_joint_vel_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_joint_vel)
}

// required double right_joint_ang = 8;
bool StoupentoMesurement::has_right_joint_ang() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void StoupentoMesurement::set_has_right_joint_ang() {
  _has_bits_[0] |= 0x00000080u;
}
void StoupentoMesurement::clear_has_right_joint_ang() {
  _has_bits_[0] &= ~0x00000080u;
}
void StoupentoMesurement::clear_right_joint_ang() {
  right_joint_ang_ = 0;
  clear_has_right_joint_ang();
}
 double StoupentoMesurement::right_joint_ang() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_joint_ang)
  return right_joint_ang_;
}
 void StoupentoMesurement::set_right_joint_ang(double value) {
  set_has_right_joint_ang();
  right_joint_ang_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_joint_ang)
}

// required double left_wheel_torque = 9;
bool StoupentoMesurement::has_left_wheel_torque() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void StoupentoMesurement::set_has_left_wheel_torque() {
  _has_bits_[0] |= 0x00000100u;
}
void StoupentoMesurement::clear_has_left_wheel_torque() {
  _has_bits_[0] &= ~0x00000100u;
}
void StoupentoMesurement::clear_left_wheel_torque() {
  left_wheel_torque_ = 0;
  clear_has_left_wheel_torque();
}
 double StoupentoMesurement::left_wheel_torque() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_wheel_torque)
  return left_wheel_torque_;
}
 void StoupentoMesurement::set_left_wheel_torque(double value) {
  set_has_left_wheel_torque();
  left_wheel_torque_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.left_wheel_torque)
}

// required double right_wheel_torque = 10;
bool StoupentoMesurement::has_right_wheel_torque() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void StoupentoMesurement::set_has_right_wheel_torque() {
  _has_bits_[0] |= 0x00000200u;
}
void StoupentoMesurement::clear_has_right_wheel_torque() {
  _has_bits_[0] &= ~0x00000200u;
}
void StoupentoMesurement::clear_right_wheel_torque() {
  right_wheel_torque_ = 0;
  clear_has_right_wheel_torque();
}
 double StoupentoMesurement::right_wheel_torque() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_wheel_torque)
  return right_wheel_torque_;
}
 void StoupentoMesurement::set_right_wheel_torque(double value) {
  set_has_right_wheel_torque();
  right_wheel_torque_ = value;
  // @@protoc_insertion_point(field_set:stoupentoPlugin_msgs.msgs.StoupentoMesurement.right_wheel_torque)
}

// required .gazebo.msgs.Vector3d linear_acc = 11;
bool StoupentoMesurement::has_linear_acc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void StoupentoMesurement::set_has_linear_acc() {
  _has_bits_[0] |= 0x00000400u;
}
void StoupentoMesurement::clear_has_linear_acc() {
  _has_bits_[0] &= ~0x00000400u;
}
void StoupentoMesurement::clear_linear_acc() {
  if (linear_acc_ != NULL) linear_acc_->::gazebo::msgs::Vector3d::Clear();
  clear_has_linear_acc();
}
const ::gazebo::msgs::Vector3d& StoupentoMesurement::linear_acc() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.linear_acc)
  return linear_acc_ != NULL ? *linear_acc_ : *default_instance_->linear_acc_;
}
::gazebo::msgs::Vector3d* StoupentoMesurement::mutable_linear_acc() {
  set_has_linear_acc();
  if (linear_acc_ == NULL) {
    linear_acc_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:stoupentoPlugin_msgs.msgs.StoupentoMesurement.linear_acc)
  return linear_acc_;
}
::gazebo::msgs::Vector3d* StoupentoMesurement::release_linear_acc() {
  // @@protoc_insertion_point(field_release:stoupentoPlugin_msgs.msgs.StoupentoMesurement.linear_acc)
  clear_has_linear_acc();
  ::gazebo::msgs::Vector3d* temp = linear_acc_;
  linear_acc_ = NULL;
  return temp;
}
void StoupentoMesurement::set_allocated_linear_acc(::gazebo::msgs::Vector3d* linear_acc) {
  delete linear_acc_;
  linear_acc_ = linear_acc;
  if (linear_acc) {
    set_has_linear_acc();
  } else {
    clear_has_linear_acc();
  }
  // @@protoc_insertion_point(field_set_allocated:stoupentoPlugin_msgs.msgs.StoupentoMesurement.linear_acc)
}

// required .gazebo.msgs.Vector3d angular_vel = 12;
bool StoupentoMesurement::has_angular_vel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void StoupentoMesurement::set_has_angular_vel() {
  _has_bits_[0] |= 0x00000800u;
}
void StoupentoMesurement::clear_has_angular_vel() {
  _has_bits_[0] &= ~0x00000800u;
}
void StoupentoMesurement::clear_angular_vel() {
  if (angular_vel_ != NULL) angular_vel_->::gazebo::msgs::Vector3d::Clear();
  clear_has_angular_vel();
}
const ::gazebo::msgs::Vector3d& StoupentoMesurement::angular_vel() const {
  // @@protoc_insertion_point(field_get:stoupentoPlugin_msgs.msgs.StoupentoMesurement.angular_vel)
  return angular_vel_ != NULL ? *angular_vel_ : *default_instance_->angular_vel_;
}
::gazebo::msgs::Vector3d* StoupentoMesurement::mutable_angular_vel() {
  set_has_angular_vel();
  if (angular_vel_ == NULL) {
    angular_vel_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:stoupentoPlugin_msgs.msgs.StoupentoMesurement.angular_vel)
  return angular_vel_;
}
::gazebo::msgs::Vector3d* StoupentoMesurement::release_angular_vel() {
  // @@protoc_insertion_point(field_release:stoupentoPlugin_msgs.msgs.StoupentoMesurement.angular_vel)
  clear_has_angular_vel();
  ::gazebo::msgs::Vector3d* temp = angular_vel_;
  angular_vel_ = NULL;
  return temp;
}
void StoupentoMesurement::set_allocated_angular_vel(::gazebo::msgs::Vector3d* angular_vel) {
  delete angular_vel_;
  angular_vel_ = angular_vel;
  if (angular_vel) {
    set_has_angular_vel();
  } else {
    clear_has_angular_vel();
  }
  // @@protoc_insertion_point(field_set_allocated:stoupentoPlugin_msgs.msgs.StoupentoMesurement.angular_vel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace stoupentoPlugin_msgs

// @@protoc_insertion_point(global_scope)
